stages:
  - build
  - login-docker
  - calculate-version
  - deploy-image
  - qa
  - run-master
  - run-develop
  - run-releases
  

# build:
#   stage: build
#   script:
#     - docker-compose -f docker/test.yml up -d
#     - mvn clean deploy
#     - docker-compose -f docker/test.yml down
#   tags:
#     - shell

build:
  stage: build
  image: maven:3-jdk-8-alpine
  services:
    - name: mysql:5.7
      alias: devops-db-test
  variables:
    MYSQL_ROOT_PASSWORD: $MYSQL_ROOT_PASSWORD
    MYSQL_DATABASE: 'devops'
    MYSQL_USER: 'devops'
    MYSQL_PASSWORD: $MYSQL_PASSWORD
    DATABASE_HOST: 'devops-db-test'
    DATABASE_PORT: '3306'
    DATABASE_NAME: 'devops'
    DATABASE_USER: 'devops'
    DATABASE_PASS: $DATABASE_PASS
    NEXUS_USER: $NEXUS_USER
    NEXUS_PASS: $NEXUS_PASS
    MAVEN_OPTS: -Dmaven.repo.local=/cache/maven.repository
  script:
    - env
    - mvn clean deploy --settings .m2/settings.xml
  artifacts:
    paths:
      - target
  tags:
    - docker

login-docker:
  stage: login-docker
  script:
    - docker login -u $DR_USER -p $DR_PASS $DR_URL
  tags:
    - shell
    
calculate-version:
  stage: calculate-version
  image: maven:3-jdk-8-alpine
  variables:
    MAVEN_OPTS: -Dmaven.repo.local=/cache/maven.repository
  script:
    - mvn org.apache.maven.plugins:maven-help-plugin:2.1.1:evaluate -Dexpression=project.version -l version.log
  artifacts:
    paths:
      - version.log
  tags:
    - docker

deploy-image:
  stage: deploy-image
  variables:
    MAVEN_OPTS: -Dmaven.repo.local=/cache/maven.repository
  script:
    #- mvn org.apache.maven.plugins:maven-help-plugin:2.1.1:evaluate -Dexpression=project.version -l version.log
    - APP_VERSION="$(grep -v '\[' version.log)"
    - docker build -t $DR_URL/$CI_PROJECT_PATH:$APP_VERSION .
    - docker tag $DR_URL/$CI_PROJECT_PATH:$APP_VERSION $DR_URL/$CI_PROJECT_PATH:$APP_VERSION
    - docker push $DR_URL/$CI_PROJECT_PATH:$APP_VERSION
  dependencies:
    - build
    - calculate-version
  tags:
    - shell

run-master:
  stage: run-master
  variables:
    MAVEN_OPTS: -Dmaven.repo.local=/cache/maven.repository
  script:
    - echo APP_VERSION="$(grep -v '\[' version.log)" > .env 
    - docker-compose -f docker/master.yml up -d
  dependencies:
    - calculate-version
  only:
    - master
  tags:
    - shell
  environment:
    name: produccion
    url: http://local.gitlab.com:8090/version
  when: manual

run-develop:
  stage: run-develop
  variables:
    MAVEN_OPTS: -Dmaven.repo.local=/cache/maven.repository
  script:
    - echo APP_VERSION="$(grep -v '\[' version.log)" > .env
    - docker-compose -f docker/develop.yml up -d
  dependencies:
    - calculate-version
  only:
    - develop
  tags:
    - shell
  environment:
    name: integration
    url: http://local.gitlab.com:8070/version

run-releases:
  stage: run-releases
  variables:
    MAVEN_OPTS: -Dmaven.repo.local=/cache/maven.repository
  script:
    - echo APP_VERSION="$(grep -v '\[' version.log)" > .env
    - docker-compose -f docker/releases.yml up -d
  dependencies:
    - calculate-version
  only:
    - /^release.*$/
  tags:
    - shell
  environment:
    name: pre-production
    url: http://local.gitlab.com:8050/version

sonar:
  image: local.nexus.com:8083/devops/sonar-scanner:3.0.3.778-linux
  stage: qa
  variables:
    SONAR_URL: http://local.sonarqube.com:9000
    SONAR_PROJECT_KEY: $CI_PROJECT_NAME
    SONAR_PROJECT_NAME: $CI_PROJECT_NAME 
  script:
    - env
    - APP_VERSION="$(grep -v '\[' version.log)"
    - /usr/bin/sonar-scanner-run.sh $APP_VERSION
  dependencies:
    - calculate-version
    - build
  tags:
    - docker